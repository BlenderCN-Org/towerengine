bl_info = {
	"name":         "Vertex Array for C/C++ Exporter",
	"author":       "Florian Märkl",
	"blender":      (2,6,2),
	"version":      (0,0,1),
	"location":     "File > Import-Export",
	"description":  "Exports Vertices as arrays to C code",
	"category":     "Import-Export"
}

import bpy
from bpy.props import BoolProperty
from bpy_extras.io_utils import ExportHelper

class VertexArrayExporter(bpy.types.Operator, ExportHelper):
	bl_idname	= "object.export_vertex_array"
	bl_label	= "Export"
	bl_options	= {'PRESET'}
	
	filename_ext = ".c"
	
	selection_prop = BoolProperty(name = "Selection Only", description = "Export selection only", default = True)
	
	def execute(self, context):
		current_vertex_id = 0
		meshes = dict()
		
		vertex_data = list()
		index_data = list()

		scene = bpy.data.scenes.values()[0];
		
		for obj in bpy.data.objects:
			if self.selection_prop == True and obj.select == False:
				continue
			
			try:
				mesh = obj.to_mesh(scene, True, 'PREVIEW')
				mesh.transform(obj.matrix_world)
				mesh.calc_normals();
				meshes[mesh.name] = mesh
			except RuntimeError:
				continue
		
		for mesh in meshes.values():
			face_vertex_id = dict()
			vertex_id = dict()
			mesh.update(False, True)
			
			for face in mesh.tessfaces:
					face_vertex_id[face] = dict()
					
					for i in range(len(face.vertices)):
						vertex = face.vertices[i]
						
						if vertex not in vertex_id:
							vertex_id[vertex] = current_vertex_id
							
							mesh_vertex = mesh.vertices[vertex]		
							vertex_data.append(mesh_vertex.co.x)
							vertex_data.append(mesh_vertex.co.z)
							vertex_data.append(-mesh_vertex.co.y)
							
							current_vertex_id = current_vertex_id + 1
							
						
						face_vertex_id[face][i] = vertex_id[vertex];	
							
					
			for face in mesh.tessfaces:
				if len(face.vertices) >= 3:
					for i in range(3):
						index_data.append(face_vertex_id[face][i]);

				if len(face.vertices) >= 4:
					for i in [2, 3, 0]:
						index_data.append(face_vertex_id[face][i]);
						
		file = open(self.filepath, 'w')
		
		file.write("// generated by \"Vertex Array for C/C++ Exporter\" written by Florian Märkl\n\n")
		
		file.write("float vertex[" + str(len(vertex_data)) + "] = { ")
		
		first = True
		for v in vertex_data:
			if first == False:
				file.write(", ")
			else:
				first = False
				
			file.write(str(float(v)))
		
		file.write(" };\n\n");
		
		
		file.write("int index[" + str(len(index_data)) + "] = { ")
		
		first = True
		for i in index_data:
			if first == False:
				file.write(", ")
			else:
				first = False
				
			file.write(str(int(i)))
		
		file.write(" };");
		
		file.close()
		
		return {'FINISHED'}
						
def menu_func(self, context):
	self.layout.operator(VertexArrayExporter.bl_idname, text="Vertex Array for C/C++ (.c)")

def register():
	bpy.utils.register_module(__name__)
	bpy.types.INFO_MT_file_export.append(menu_func)

def unregister():
	bpy.utils.unregister_module(__name__)
	bpy.types.INFO_MT_file_export.remove(menu_func)

if __name__ == "__main__":
	register()