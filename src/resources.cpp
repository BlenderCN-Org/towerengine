//-----------------------------------------------------------------------
// This file has been generated by stringres by Metallic Entertainment
// for further information go to http://www.metallic-entertainment.com
//-----------------------------------------------------------------------

#include "tresources.h"

const char *face_shader_vert = 
"#version 130\n"
"\n"
"uniform mat4 gl_TextureMatrix[gl_MaxTextureCoords];\n"
"uniform mat4 gl_ModelViewProjectionMatrix;\n"
"uniform mat4 gl_ModelViewMatrix;\n"
"uniform mat4 gl_ModelViewMatrixInverse;\n"
"\n"
"in vec3 vertex_attr;\n"
"in vec2 uv_attr;\n"
"in vec3 normal_attr;\n"
"in vec3 tang_attr;\n"
"in vec3 bitang_attr;\n"
"\n"
"uniform mat4 transformation_uni;\n"
"\n"
"out vec3 pos_var;\n"
"out vec3 normal_var;\n"
"out vec3 tang_var;\n"
"out vec3 bitang_var;\n"
"out vec2 uv_var;\n"
"\n"
"out vec3 cam_pos_var;\n"
"out vec4 shadow_coord_var;\n"
"\n"
"void main(void)\n"
"{\n"
"	vec4 pos = vec4(vertex_attr, 1.0) * transformation_uni;\n"
"	pos_var = pos.xyz;\n"
"	normal_var = normalize(normal_attr * mat3(transformation_uni));\n"
"	tang_var = normalize(tang_attr * mat3(transformation_uni));\n"
"	bitang_var = normalize(bitang_attr * mat3(transformation_uni));\n"
"	uv_var = uv_attr;\n"
"	\n"
"	cam_pos_var = gl_ModelViewMatrixInverse[3].xyz;\n"
"	shadow_coord_var = gl_TextureMatrix[5] * pos;\n"
"	\n"
"	gl_Position = gl_ModelViewProjectionMatrix * pos;\n"
"}";

const char *face_shader_frag = 
"#version 130\n"
"\n"
"// -------------------------------------\n"
"\n"
"//in vec4 TexBorder;\n"
"//in float DiscardBorder;\n"
"\n"
"//in float BumpFactor;\n"
"\n"
"// -------------------------------------\n"
"\n"
"uniform bool shader_mode_uni;\n"
"\n"
"uniform bool two_side_uni;\n"
"\n"
"uniform sampler2DShadow shadow_map_uni;\n"
"uniform bool shadow_enabled_uni;\n"
"uniform vec2 shadow_pixel_size_uni;\n"
"\n"
"uniform vec3 diffuse_color_uni;\n"
"uniform vec4 diffuse_color2_uni;\n"
"uniform vec3 specular_color_uni;\n"
"uniform vec3 ambient_color_uni;\n"
"uniform float specular_size_uni;\n"
"\n"
"uniform bool diffuse_tex_enabled_uni;\n"
"uniform bool specular_tex_enabled_uni;\n"
"uniform bool normal_tex_enabled_uni;\n"
"\n"
"uniform sampler2D diffuse_tex_uni;\n"
"uniform sampler2D normal_tex_uni;\n"
"uniform sampler2D specular_tex_uni;\n"
"\n"
"uniform vec3 light_pos_uni;\n"
"uniform vec3 light_color_uni;\n"
"\n"
"uniform vec3 clip_vec_uni;\n"
"uniform float clip_dist_uni;\n"
"\n"
"\n"
"in vec3 pos_var;\n"
"in vec3 normal_var;\n"
"in vec3 tang_var;\n"
"in vec3 bitang_var;\n"
"in vec2 uv_var;\n"
"\n"
"in vec3 cam_pos_var;\n"
"in vec4 shadow_coord_var;\n"
"\n"
"\n"
"out vec4 gl_FragColor;\n"
"\n"
"\n"
"vec4 ShadowCoordO(vec2 offset)\n"
"{\n"
"	return shadow_coord_var + vec4(offset.x * shadow_pixel_size_uni.x * shadow_coord_var.w, offset.y * shadow_pixel_size_uni.y * shadow_coord_var.w, -0.0005, 0.0);\n"
"}\n"
"\n"
"vec4 ShadowCoordW(vec2 offset)\n"
"{\n"
"	return ShadowCoordO(offset) / shadow_coord_var.w;\n"
"}\n"
"\n"
"float ShadowLookup(vec2 offset)\n"
"{\n"
"	return textureProj(shadow_map_uni, ShadowCoordO(offset));\n"
"}\n"
"\n"
"\n"
"void main(void)\n"
"{\n"
"	if(!gl_FrontFacing && !two_side_uni) // backface culling\n"
"		discard;\n"
"		\n"
"	if(clip_vec_uni != vec3(0.0, 0.0, 0.0)) // face clipping for water\n"
"	{\n"
"		vec3 clip = pos_var - clip_vec_uni * clip_dist_uni;\n"
"		if(dot(clip, clip_vec_uni) >= 0.0)\n"
"			discard;\n"
"	}\n"
"	\n"
"	if(!shader_mode_uni) // shader mode\n"
"	{\n"
"		gl_FragColor = vec4(1.0);\n"
"		return;\n"
"	}\n"
"	\n"
"	vec3 light_dir = normalize(light_pos_uni - pos_var); // pos to light normalized\n"
"	vec3 cam_dir = normalize(cam_pos_var - pos_var); // pos to cam normalized\n"
"	mat3 tangent_space = mat3(tang_var, bitang_var, normal_var);\n"
"				\n"
"	vec4 diffuse_tex_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"	if(diffuse_tex_enabled_uni)\n"
"		diffuse_tex_color = texture2D(diffuse_tex_uni, uv_var).rgba;\n"
"	\n"
"	vec3 normal_tex_color = vec3(0.5, 0.5, 1.0);\n"
"	if(normal_tex_enabled_uni)\n"
"		normal_tex_color = texture2D(normal_tex_uni, uv_var).rgb;\n"
"	vec3 specular_tex_color = vec3(0.5, 0.5, 0.5);\n"
"	if(specular_tex_enabled_uni)\n"
"		specular_tex_color = texture2D(specular_tex_uni, uv_var).rgb;\n"
"	\n"
"	vec3 normal = tangent_space * (normal_tex_color - vec3(0.5, 0.5, 0.5)) * 2.0; \n"
"	\n"
"	float alpha = diffuse_tex_color.a; // alpha\n"
"	vec3 color = ambient_color_uni * diffuse_tex_color.rgb; // ambient\n"
"	\n"
"	float shadow = 1.0;\n"
"	float sr = 1.5;\n"
"	if(	shadow_enabled_uni &&\n"
"		!(ShadowCoordW(vec2(sr, 0.0)).x > 1.0 || ShadowCoordW(vec2(0.0, sr)).y > 1.0 ||	ShadowCoordW(vec2(sr, 0.0)).x < 0.0 || ShadowCoordW(vec2(0.0, sr)).y < 0.0) &&\n"
"		!(shadow_coord_var.z / shadow_coord_var.w > 1.0))\n"
"			\n"
"	{\n"
"		float x,y;\n"
"		shadow = 0.0;\n"
"		for (y=-sr; y<=sr; y+=(sr*2.0 + 1.0)/4.0)\n"
"			for (x = -sr ; x <=sr ; x+=(sr*2.0 + 1.0)/4.0)\n"
"				shadow += ShadowLookup(vec2(x,y));\n"
"		shadow /= 16.0;\n"
"	}\n"
"	\n"
"	\n"
"	float light_intensity = dot(normal, light_dir);\n"
"	color += shadow * light_intensity * light_color_uni * diffuse_tex_color.rgb; // diffuse light\n"
"	\n"
"	//specular\n"
"	vec3 specular_color = specular_tex_color * specular_color_uni * texture2D(specular_tex_uni, uv_var).rgb * light_color_uni;\n"
"	float specular_intensity = max(dot(normalize(reflect(-light_dir, normal)), cam_dir), 0.0);\n"
"	color += max(vec3(0.0, 0.0, 0.0), specular_color * pow(specular_intensity, specular_size_uni)) * light_intensity;\n"
"		\n"
"	gl_FragColor = vec4(color, alpha) * diffuse_color2_uni;\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"";

