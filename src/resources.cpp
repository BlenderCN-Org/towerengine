//-----------------------------------------------------------------------
// This file has been generated by stringres by Metallic Entertainment
// for further information go to http://www.metallic-entertainment.com
//-----------------------------------------------------------------------

#include "tresources.h"

const char *face_shader_vert = 
"#version 130\n"
"\n"
"//uniform mat4 gl_TextureMatrix[gl_MaxTextureCoords];\n"
"uniform mat4 gl_ModelViewProjectionMatrix;\n"
"uniform mat4 gl_ModelViewMatrix;\n"
"uniform mat4 gl_ModelViewMatrixInverse;\n"
"\n"
"in vec3 vertex_attr;\n"
"in vec3 vertex2_attr; // vertex of next keyframe\n"
"in vec2 uv_attr;\n"
"in vec3 normal_attr;\n"
"in vec3 tang_attr;\n"
"in vec3 bitang_attr;\n"
"\n"
"uniform float vertex_mix_uni;\n"
"uniform mat4 transformation_uni;\n"
"\n"
"out vec3 pos_var;\n"
"out vec3 normal_var;\n"
"out vec3 tang_var;\n"
"out vec3 bitang_var;\n"
"out vec2 uv_var;\n"
"\n"
"out vec3 cam_pos_var;\n"
"//out vec4 shadow_coord_var;\n"
"\n"
"\n"
"void main(void)\n"
"{\n"
"	vec3 vertex_pos = vertex_attr;\n"
"	if(vertex_mix_uni > 0.0)\n"
"		vertex_pos = vertex_pos * (1.0 - vertex_mix_uni) + vertex2_attr * vertex_mix_uni;\n"
"	vec4 pos = vec4(vertex_pos, 1.0) * transformation_uni;\n"
"	pos_var = pos.xyz;\n"
"	normal_var = normalize(normal_attr * mat3(transformation_uni));\n"
"	tang_var = normalize(tang_attr * mat3(transformation_uni));\n"
"	bitang_var = normalize(bitang_attr * mat3(transformation_uni));\n"
"	uv_var = uv_attr;\n"
"	\n"
"	cam_pos_var = gl_ModelViewMatrixInverse[3].xyz;\n"
"	//shadow_coord_var = gl_TextureMatrix[5] * pos;\n"
"	\n"
"	gl_Position = gl_ModelViewProjectionMatrix * pos;\n"
"}";

const char *face_shader_frag = 
"#version 130\n"
"\n"
"// -------------------------------------\n"
"\n"
"//in vec4 TexBorder;\n"
"//in float DiscardBorder;\n"
"\n"
"//in float BumpFactor;\n"
"\n"
"// -------------------------------------\n"
"\n"
"#define M_PI 3.1415926535897932384626433832795\n"
"\n"
"#define MAX_POINT_LIGHTS 8\n"
"#define MAX_DIRECTIONAL_LIGHTS 8\n"
"\n"
"uniform bool shader_mode_uni;\n"
"\n"
"uniform bool two_side_uni;\n"
"\n"
"uniform vec3 diffuse_color_uni;\n"
"uniform vec4 diffuse_color2_uni;\n"
"uniform vec3 specular_color_uni;\n"
"uniform float ambient_uni;\n"
"uniform float specular_size_uni;\n"
"\n"
"uniform bool diffuse_tex_enabled_uni;\n"
"uniform bool specular_tex_enabled_uni;\n"
"uniform bool normal_tex_enabled_uni;\n"
"\n"
"uniform sampler2D diffuse_tex_uni;\n"
"uniform sampler2D normal_tex_uni;\n"
"uniform sampler2D specular_tex_uni;\n"
"\n"
"uniform int point_light_count_uni;\n"
"uniform vec3 point_light_pos_uni[MAX_POINT_LIGHTS];\n"
"uniform vec3 point_light_color_uni[MAX_POINT_LIGHTS];\n"
"uniform float point_light_distance_uni[MAX_POINT_LIGHTS];\n"
"uniform bool point_light_shadow_enabled_uni[MAX_POINT_LIGHTS];\n"
"uniform samplerCube point_light_shadow_map_uni[MAX_POINT_LIGHTS];\n"
"uniform float point_light_shadow_near_clip_uni[MAX_POINT_LIGHTS];\n"
"\n"
"uniform int directional_light_count_uni;\n"
"uniform vec3 directional_light_dir_uni[MAX_DIRECTIONAL_LIGHTS];\n"
"uniform vec3 directional_light_color_uni[MAX_DIRECTIONAL_LIGHTS];\n"
"\n"
"uniform vec3 light_ambient_color_uni;\n"
"\n"
"uniform vec3 clip_vec_uni;\n"
"uniform float clip_dist_uni;\n"
"\n"
"\n"
"in vec3 pos_var;\n"
"in vec3 normal_var;\n"
"in vec3 tang_var;\n"
"in vec3 bitang_var;\n"
"in vec2 uv_var;\n"
"\n"
"in vec3 cam_pos_var;\n"
"//in vec4 shadow_coord_var;\n"
"\n"
"out vec4 gl_FragColor;\n"
"\n"
"float VectorToDepth(vec3 Vec, float n, float f)\n"
"{\n"
"    vec3 AbsVec = abs(Vec);\n"
"    float LocalZcomp = max(AbsVec.x, max(AbsVec.y, AbsVec.z));\n"
"\n"
"    float NormZComp = (f+n) / (f-n) - (2*f*n)/(f-n)/LocalZcomp;\n"
"    return (NormZComp + 1.0) * 0.5;\n"
"}\n"
"\n"
"float PointLightShadowLookup(int i, vec3 dir)\n"
"{\n"
"	switch(i)\n"
"	{\n"
"		case 0: return texture(point_light_shadow_map_uni[0], dir).r;\n"
"		case 1: return texture(point_light_shadow_map_uni[1], dir).r;\n"
"		case 2: return texture(point_light_shadow_map_uni[2], dir).r;\n"
"		case 3: return texture(point_light_shadow_map_uni[3], dir).r;\n"
"		case 4: return texture(point_light_shadow_map_uni[4], dir).r;\n"
"		case 5: return texture(point_light_shadow_map_uni[5], dir).r;\n"
"		case 6: return texture(point_light_shadow_map_uni[6], dir).r;\n"
"		case 7: return texture(point_light_shadow_map_uni[7], dir).r;\n"
"	}\n"
"	\n"
"	return 1.0;\n"
"}\n"
"\n"
"void main(void)\n"
"{\n"
"	if(!gl_FrontFacing && !two_side_uni) // backface culling\n"
"		discard;\n"
"		\n"
"	if(clip_vec_uni != vec3(0.0, 0.0, 0.0)) // face clipping for water\n"
"	{\n"
"		vec3 clip = pos_var - clip_vec_uni * clip_dist_uni;\n"
"		if(dot(clip, clip_vec_uni) >= 0.0)\n"
"			discard;\n"
"	}\n"
"	\n"
"	if(!shader_mode_uni) // shader mode\n"
"	{\n"
"		gl_FragColor = vec4(1.0);\n"
"		return;\n"
"	}\n"
"	\n"
"\n"
"	vec3 cam_dir = normalize(cam_pos_var - pos_var); // pos to cam normalized\n"
"	mat3 tangent_space = mat3(tang_var, bitang_var, normal_var);\n"
"				\n"
"	vec4 diffuse_color = vec4(1.0, 1.0, 1.0, 1.0);\n"
"	if(diffuse_tex_enabled_uni)\n"
"		diffuse_color = texture2D(diffuse_tex_uni, uv_var).rgba;\n"
"	diffuse_color *= vec4(diffuse_color_uni.rgb, 1.0);\n"
"	\n"
"	vec3 normal_tex_color = vec3(0.5, 0.5, 1.0);\n"
"	if(normal_tex_enabled_uni)\n"
"		normal_tex_color = texture2D(normal_tex_uni, uv_var).rgb;\n"
"	vec3 specular_tex_color = vec3(0.5, 0.5, 0.5);\n"
"	if(specular_tex_enabled_uni)\n"
"		specular_tex_color = texture2D(specular_tex_uni, uv_var).rgb;\n"
"	\n"
"	vec3 normal = tangent_space * (normal_tex_color - vec3(0.5, 0.5, 0.5)) * 2.0; \n"
"	\n"
"	float alpha = diffuse_color.a; // alpha\n"
"	vec3 color = light_ambient_color_uni * diffuse_color.rgb * ambient_uni; // ambient\n"
"	\n"
"	float light_intensity;\n"
"	float shadow = 1.0;\n"
"	vec3 specular_color;\n"
"	float specular_intensity;\n"
"	int i;\n"
"	float bias;\n"
"	float shadow_depth, light_depth;\n"
"		\n"
"	for(i=0; i<point_light_count_uni; i++)\n"
"	{\n"
"		vec3 light_dir = point_light_pos_uni[i] - pos_var; // pos to light\n"
"		float light_dist = light_dir.x * light_dir.x + light_dir.y * light_dir.y + light_dir.z * light_dir.z; // squared distance\n"
"		if(light_dist > point_light_distance_uni[i] * point_light_distance_uni[i])\n"
"			continue;\n"
"		light_dist = sqrt(light_dist); // real distance\n"
"		light_dir /= light_dist; // normalized dir\n"
"		\n"
"		\n"
"		if(point_light_shadow_enabled_uni[i])\n"
"		{\n"
"			int x, y;\n"
"			vec3 shadow_dir = -light_dir;\n"
"			vec2 shadow_dir_xz = normalize(shadow_dir.xz);\n"
"			vec2 shadow_rot;\n"
"			vec2 shadow_rot_v;\n"
"			float sr = 0.002;\n"
"			vec3 pcf_dir;\n"
"			\n"
"			shadow_rot.x = asin(shadow_dir.y);\n"
"			shadow_rot.y = asin(shadow_dir_xz.y);\n"
"			if(shadow_dir.x < 0.0)\n"
"				shadow_rot.y = M_PI - shadow_rot.y;\n"
"				\n"
"			shadow = 0.0;\n"
"			\n"
"			int samples = 2;\n"
"			\n"
"			for (y=-samples; y<=samples; y++)\n"
"					for (x=-samples; x<=samples; x++)\n"
"					{\n"
"						shadow_rot_v = vec2(shadow_rot.x + float(x) * sr, shadow_rot.y + float(y) * sr);\n"
"						pcf_dir.y = sin(shadow_rot_v.x);\n"
"						pcf_dir.z = sin(shadow_rot_v.y) * cos(shadow_rot_v.x);\n"
"						pcf_dir.x = cos(shadow_rot_v.y) * cos(shadow_rot_v.x); \n"
"						shadow_depth = PointLightShadowLookup(i, pcf_dir);\n"
"						//bias = 0.0005 * tan(acos(clamp(dot(normal_var, light_dir), 0.0, 1.0)));\n"
"						//bias = clamp(bias, 0.0, 0.0015);\n"
"						bias = (0.001 + abs(sqrt(float(x * x  + y * y))) * 0.0005) * tan(acos(clamp(dot(normal_var, light_dir), 0.0, 1.0)));\n"
"						light_depth = VectorToDepth(light_dir * (light_dist - bias), point_light_shadow_near_clip_uni[i], point_light_distance_uni[i]);\n"
"						if(shadow_depth + bias >= light_depth)\n"
"							shadow += 1.0;\n"
"					}\n"
"			shadow /= (samples * 2 + 1) * (samples * 2 + 1);\n"
"		}\n"
"	\n"
"	\n"
"		light_intensity = max(dot(normal, light_dir), 0.0) *  (1.0 - light_dist / point_light_distance_uni[i]);\n"
"		color += shadow * light_intensity * point_light_color_uni[i] * diffuse_color.rgb; // diffuse light\n"
"	\n"
"		//specular\n"
"		specular_color = specular_tex_color * specular_color_uni * point_light_color_uni[i];\n"
"		specular_intensity = max(dot(normalize(reflect(-light_dir, normal)), cam_dir), 0.0) * light_intensity;\n"
"		color += max(vec3(0.0, 0.0, 0.0), specular_color * pow(specular_intensity, specular_size_uni)) * shadow;\n"
"	}\n"
"	\n"
"	for(i=0; i<directional_light_count_uni; i++)\n"
"	{\n"
"		shadow = 1.0;\n"
"		light_intensity = max(dot(normal, directional_light_dir_uni[i]), 0.0);\n"
"		color += shadow * light_intensity * directional_light_color_uni[i] * diffuse_color.rgb; // diffuse light\n"
"	\n"
"		//specular\n"
"		specular_color = specular_tex_color * specular_color_uni * directional_light_color_uni[i];\n"
"		specular_intensity = max(dot(normalize(reflect(-directional_light_dir_uni[i], normal)), cam_dir), 0.0) * light_intensity;\n"
"		color += max(vec3(0.0, 0.0, 0.0), specular_color * pow(specular_intensity, specular_size_uni)) * shadow;\n"
"	}\n"
"	\n"
"	gl_FragColor = vec4(color, alpha) * diffuse_color2_uni;\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"";

const char *cube_env_shader_vert = 
"varying vec3 Pos;\n"
"\n"
"void main(void)\n"
"{\n"
"	Pos = gl_Vertex.xyz;\n"
"	gl_Position = ftransform();\n"
"}";

const char *cube_env_shader_frag = 
"uniform samplerCube Texture;\n"
"\n"
"varying vec3 Pos;\n"
"\n"
"vec3 pos;\n"
"\n"
"void main(void)\n"
"{\n"
"	vec3 color = textureCube(Texture, normalize(Pos)).xyz;\n"
"	gl_FragColor = vec4(color, 1.0);\n"
"}";

